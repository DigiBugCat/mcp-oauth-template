#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${GREEN}🚀 Deploying MCP OAuth Server...${NC}"

# Check if .env file exists
if [ ! -f "$PROJECT_ROOT/.env" ]; then
    echo -e "${RED}❌ Error: .env file not found!${NC}"
    echo "Please create .env from .env.example and configure it."
    exit 1
fi

# Load environment variables
set -a
source "$PROJECT_ROOT/.env"
set +a

# Generate composite names
export MCP_SERVER_NAME="${SERVICE_TYPE}-${PROJECT_NAME}-${ENVIRONMENT}"
export TUNNEL_NAME="${SERVICE_TYPE}-${PROJECT_NAME}-${ENVIRONMENT}-tunnel"
export WORKER_NAME="${SERVICE_TYPE}-${PROJECT_NAME}-${ENVIRONMENT}-worker"

echo -e "${YELLOW}Service Identification:${NC}"
echo "  Service Type: $SERVICE_TYPE"
echo "  Project Name: $PROJECT_NAME"
echo "  Environment: $ENVIRONMENT"
echo "  Generated Name: $MCP_SERVER_NAME"
echo

# Validate required environment variables
required_vars=(
    "CLOUDFLARE_API_TOKEN"
    "CLOUDFLARE_ACCOUNT_ID" 
    "CLOUDFLARE_ZONE_ID"
    "DOMAIN"
    "SUBDOMAIN"
    "SERVICE_TYPE"
    "PROJECT_NAME"
    "ENVIRONMENT"
    "GITHUB_CLIENT_ID"
    "GITHUB_CLIENT_SECRET"
)

missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${!var:-}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -ne 0 ]; then
    echo -e "${RED}❌ Error: Missing required environment variables:${NC}"
    printf '%s\n' "${missing_vars[@]}"
    exit 1
fi

# Step 1: Build Worker
echo -e "${YELLOW}📦 Building Worker...${NC}"
cd "$PROJECT_ROOT/worker"

# Install dependencies
npm install

# Build the Worker
echo "Building Worker bundle..."
npm run build

# Check if build was successful
if [ ! -f "dist/worker.js" ]; then
    echo -e "${RED}❌ Error: Worker build failed! dist/worker.js not found${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Worker built successfully${NC}"

# Step 2: Deploy infrastructure with Terraform
echo -e "${YELLOW}🏗️  Deploying infrastructure...${NC}"
cd "$PROJECT_ROOT/terraform"

# Create terraform.tfvars
cat > terraform.tfvars << EOF
cloudflare_api_token  = "$CLOUDFLARE_API_TOKEN"
cloudflare_account_id = "$CLOUDFLARE_ACCOUNT_ID"
cloudflare_zone_id    = "$CLOUDFLARE_ZONE_ID"
domain                = "$DOMAIN"
subdomain             = "$SUBDOMAIN"
mcp_subdomain         = "${MCP_SUBDOMAIN:-}"
service_type          = "$SERVICE_TYPE"
project_name          = "$PROJECT_NAME"
github_client_id      = "$GITHUB_CLIENT_ID"
github_client_secret  = "$GITHUB_CLIENT_SECRET"
allowed_github_users  = "${ALLOWED_GITHUB_USERS:-}"
allowed_github_orgs   = "${ALLOWED_GITHUB_ORGS:-}"
allowed_github_teams  = "${ALLOWED_GITHUB_TEAMS:-}"
allowed_email_domains = "${ALLOWED_EMAIL_DOMAINS:-}"
environment           = "${ENVIRONMENT:-production}"

preconfigured_oauth_clients = [
  {
    client_id     = "claude-desktop-client"
    client_secret = null
    redirect_uris = ["https://claude.ai/api/mcp/auth_callback"]
    client_name   = "Claude Desktop Example"
  },
  {
    client_id     = "test-client"
    client_secret = "test_secret_abc123"
    redirect_uris = ["https://${SUBDOMAIN}.${DOMAIN}/test-callback"]
    client_name   = "Test Client"
  }
]
EOF

# Initialize Terraform if needed
if [ ! -d ".terraform" ]; then
    terraform init
fi

# Apply Terraform
terraform apply -auto-approve

# Extract outputs
TUNNEL_ID=$(terraform output -raw tunnel_id)
TUNNEL_NAME=$(terraform output -raw tunnel_name)

echo -e "${GREEN}✅ Infrastructure deployed${NC}"

# Step 3: Verify Worker deployment
echo -e "${YELLOW}✅ Verifying Worker deployment...${NC}"
WORKER_NAME=$(terraform output -raw worker_name)
echo "Worker deployed as: $WORKER_NAME"

# Step 4: Tunnel credentials are now created by Terraform
echo -e "${YELLOW}🔐 Tunnel credentials generated by Terraform${NC}"

# Step 5: Start Docker services
echo -e "${YELLOW}🐳 Starting Docker services...${NC}"
cd "$PROJECT_ROOT/docker"

# Export variables for docker-compose
export TUNNEL_NAME="$TUNNEL_NAME"
export MCP_SERVER_NAME="$MCP_SERVER_NAME"

# Start services
docker-compose up -d

# Wait for services to be healthy
echo -e "${YELLOW}⏳ Waiting for services to start...${NC}"
sleep 10

# Check service health
if docker-compose ps | grep -q "unhealthy"; then
    echo -e "${RED}❌ Error: Some services are unhealthy${NC}"
    docker-compose ps
    docker-compose logs
    exit 1
fi

# Step 6: Display results
echo -e "${GREEN}✅ Deployment complete!${NC}"
echo
echo -e "${GREEN}OAuth Authorization URL:${NC} https://$SUBDOMAIN.$DOMAIN/oauth/authorize"
echo -e "${GREEN}MCP Server URL:${NC} https://$SUBDOMAIN.$DOMAIN"
echo -e "${GREEN}OAuth Metadata:${NC} https://$SUBDOMAIN.$DOMAIN/.well-known/oauth-authorization-server"
echo
echo -e "${RED}📝 IMPORTANT: Update worker/wrangler.toml with these KV namespace IDs:${NC}"
echo -e "${YELLOW}OAUTH_KV ID:${NC} $(terraform output -raw oauth_kv_namespace_id)"
echo -e "${YELLOW}SESSION_KV ID:${NC} $(terraform output -raw session_kv_namespace_id)"
echo
echo -e "${YELLOW}GitHub OAuth App Setup:${NC}"
terraform output github_oauth_setup
echo
echo -e "${YELLOW}To view logs:${NC}"
echo "  docker-compose -f $PROJECT_ROOT/docker/docker-compose.yml logs -f"
echo
echo -e "${YELLOW}To test with Claude Desktop:${NC}"
echo "  1. Open Claude Desktop settings"
echo "  2. Add custom integration with URL: https://$SUBDOMAIN.$DOMAIN"
echo "  3. Complete OAuth flow when prompted"